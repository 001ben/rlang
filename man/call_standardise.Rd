% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/call.R
\name{call_standardise}
\alias{call_standardise}
\title{Standardise a call against formal arguments}
\usage{
call_standardise(call = NULL, env = NULL, fn = NULL, enum_dots = FALSE)
}
\arguments{
\item{call}{Can be a call, a formula quoting a call in the
right-hand side, or a frame object from which to extract the call
expression. If not supplied, the calling frame is used.}

\item{env}{Environment in which to look up call the function
definition and the contents of \code{...}. If not supplied, it is
retrieved from \code{call} if the latter is a frame object or a
formula.}

\item{fn}{The function against which to standardise the call. It is
lookep up in \code{env} if not supplied, or retrieved from
\code{call} if it is a frame.}

\item{enum_dots}{Whether to standardise the names of dotted
arguments. If \code{TRUE}, this produces calls such as
\code{f(..1 = ..2)} instead of \code{f(..2)}. The first form is
mostly intended for code analysis tools as it makes it easier to
climb arguments through nested calls. The latter form (the
default) is more faithful to the actual call and is ready to be
evaluated.}
}
\description{
Compared to \code{\link{match.call}()}, \code{call_standardise()}:
\itemize{
  \item Always report dotted arguments as such: \code{call(..1, ..2)}.
        In comparison, \code{match.call()} inlines literals:
        \code{call("foo", 10)}.
  \item Provides an argument \code{enum_dots} to impose
        enumerated names on dotted arguments. This produces
        \code{call(..1 = x, ..2 = ..3)} instead of
        \code{call(foo = x, ..3)}.
  \item Does not sort arguments according to the order of
        appearance in the function definition.
}
}

