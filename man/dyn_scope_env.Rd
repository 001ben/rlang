% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy-eval.R
\name{dyn_scope_env}
\alias{dyn_scope_env}
\alias{dyn_scope_install}
\alias{dyn_scope_clean}
\title{Create a tidy evaluation environment.}
\usage{
dyn_scope_env(lexical_env = base_env(), data = NULL)

dyn_scope_install(bottom_env, top_env, lexical_env)

dyn_scope_clean(bottom_env)
}
\arguments{
\item{lexical_env}{The original lexical scope. Usually the
environment bundled with the outermost tidy quote.}

\item{data}{Additional data to put in scope.}

\item{bottom_env}{This is the environment in which formula-promises
are evaluated. This environment typically contains pronouns and
its direct parents contain the rescoping bindings. The last one
of these parents is the `top_env`.}

\item{top_env}{The top environment of the dynamic scope is chained
and rechained to lexical enclosures of self-evaluating formulas
(or formula-promises). This ensures hygienic scoping: the
bindings in the dynamic scope have precedence, but the bindings
in the dynamic environment where the tidy quotes were created are
in scope as well.}
}
\description{
This is useful when want to use the tidy evaluation framework in
your own evaluating functions. The returned environment has
elements of \code{data} in scope, the \code{.env} and \code{.data}
pronouns, and treats formulas as self-evaluating promises. See
\code{\link{tidy_eval}()} and \code{\link{tidy_quote}()} for more
information.
}
\details{
Once an expression has been evaluated in the tidy environment, it's
a good idea to clean up the definitions that make self-evaluation
of formulas possible \code{dyn_scope_clean()}. Otherwise
your users may face unexpected results in specific corner cases
(e.g. when the evaluation environment is leaked, see examples).
}
\examples{
# Evaluating in a tidy evaluation environment enables all tidy
# features:
env <- dyn_scope_env(data = mtcars)
eval(quote(list(.data$cyl, ~letters)), env)

# However you need to cleanup the environment after
# evaluation. Otherwise the leftover definitions for self-evaluation
# of formulas might cause unexpected results:
fn <- eval(quote(function() ~letters), env)
fn()

dyn_scope_clean(env)
fn()
}
