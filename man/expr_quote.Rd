% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr.R
\name{expr_quote}
\alias{expr_quote}
\title{Untidy quotation of an expression.}
\usage{
expr_quote(expr)
}
\arguments{
\item{expr}{An expression.}
}
\value{
The raw expression supplied as argument.
}
\description{
Unlike \code{\link{tidy_quote}()}, \code{expr_quote()} returns a
raw expression instead of a formula. As a result,
\code{expr_quote()} is untidy in the sense that it does not
preserve scope information for the quoted expression. It can still
be useful in certain cases. Compared to base R's
\code{\link[base]{quote}()}, it unquotes the expression on capture,
and compared to \code{\link{tidy_quote}()}, the quoted expression
is directly compatible with the base R \code{\link[base]{eval}()}
function.
}
\examples{
# The advantage of expr_quote() over quote() is that it unquotes on
# capture:
expr_quote(list(1, !! 3 + 10))

# Unquoting can be especially useful for successive transformation
# of a captured expression:
(expr <- quote(foo(bar)))
(expr <- expr_quote(inner(!! expr, arg1)))
(expr <- expr_quote(outer(!! expr, !!! lapply(letters[1:3], as.symbol))))

# Unlike tidy_quote(), expr_quote() produces expressions that can
# be evaluated with base::eval():
e <- quote(letters)
e <- expr_quote(toupper(!!e))
eval(e)

# Be careful if you unquote a formula-quote: you need to take the
# RHS (and lose the scope information) to evaluate with eval():
f <- ~letters
e <- expr_quote(toupper(!! f_rhs(f)))
eval(e)

# However it's fine to unquote formulas if you evaluate with tidy_eval():
f <- ~letters
e <- expr_quote(toupper(!! f))
tidy_eval(e)
}
\seealso{
See \code{\link{tidy_quote}()} and
  \code{\link{tidy_interp}()} for more explanation on tidy
  quotation.
}

