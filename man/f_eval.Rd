% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/f-eval.R
\name{f_eval}
\alias{f_eval}
\title{Evaluate a formula}
\usage{
f_eval(f, data = NULL)
}
\arguments{
\item{f}{A one-sided formula. Any expressions wrapped in \code{ (( )) } will
will be "unquoted", i.e. they will be evaluated, and the results inserted
back into the formula. See \code{\link{f_interp}} for more details.}

\item{data}{A list (or data frame).}
}
\description{
\code{f_eval} evaluates the \code{\link{f_rhs}} of a formula in its environment.
If \code{data} is supplied, it will look for the values associated with
symbols in there first.
}
\section{Pronouns}{

When used with \code{data}, \code{f_eval} provides two pronouns to make it
possible to be explicit about where you want values to come from:
\code{.env} and \code{.data}. These are thin wrappers around \code{.data}
and \code{.env} that throw errors if you try to access non-existent values.
}
\examples{
f_eval(~ 1 + 2 + 3)

# formulas automatically capture their enclosing environment
foo <- function(x) {
  y <- 10
  ~ x + y
}
f <- foo(1)
f
f_eval(f)

# If you supply data, feval will for their first:
f_eval(~ cyl, mtcars)

# To avoid ambiguity, you can use .env and .data pronouns to be
# explicit:
cyl <- 10
f_eval(~ .data$cyl, mtcars)
f_eval(~ .env$cyl, mtcars)

# Imagine you are computing the mean of a variable:
f_eval(~ mean(cyl), mtcars)
# How can you change the variable that's being computed?
# The easiest way is to take advantage of that the fact that anything
# inside (( )) will be evaluated and literally inserted into formula.
# See ?f_interp for more details
var <- quote(cyl)
f_eval(~ mean( ((var)) ), mtcars)

# If you were using this inside a function, you might want to
# take one more step of explicitness. Unfortunately data$((var)) is
# not valid R code, so we need to use the prefix for of `$`.
f_eval(~ mean( `$`(.data, ((var)) )), mtcars)
}

