% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr-node.R
\name{node}
\alias{node}
\alias{node}
\alias{node_car}
\alias{node_cdr}
\alias{node_caar}
\alias{node_cadr}
\alias{node_cdar}
\alias{node_cddr}
\alias{mut_node_car}
\alias{mut_node_cdr}
\alias{mut_node_caar}
\alias{mut_node_cadr}
\alias{mut_node_cdar}
\alias{mut_node_cddr}
\alias{node_tag}
\alias{mut_node_tag}
\title{Helpers for pairlist and language nodes}
\usage{
node(newcar, newcdr)

node_car(x)

node_cdr(x)

node_caar(x)

node_cadr(x)

node_cdar(x)

node_cddr(x)

mut_node_car(x, newcar)

mut_node_cdr(x, newcdr)

mut_node_caar(x, newcar)

mut_node_cadr(x, newcar)

mut_node_cdar(x, newcdr)

mut_node_cddr(x, newcdr)

node_tag(x)

mut_node_tag(x, newtag)
}
\arguments{
\item{newcar, newcdr}{The new CAR or CDR for the node. These can be
any R objects.}

\item{x}{A language or pairlist node. Note that these functions are
barebones and do not perform any type checking.}

\item{newtag}{The new tag for the node. This should be a symbol.}
}
\value{
Setters like \code{mut_node_car()} invisibly return \code{x} modified
in place. Getters return the requested node component.
}
\description{
These functions are mostly useful to navigate ASTs which are
organised as binary trees of \href{https://en.wikipedia.org/wiki/CAR_and_CDR}{conscells}. They are low
level getters and setters that don't perform any type checking. As
such, they can easily make R crash. Their main purpose is to
prototype C code for computing on the language and they are meant
for R experts only.
}
\examples{
# Changing a node component happens in place and can have side
# effects. Let's create a language object and a copy of it:
lang <- quote(foo(bar))
copy <- lang

# Using R's builtin operators to change the language tree does not
# create side effects:
copy[[2]] <- quote(baz)
copy
lang

# On the other hand, the CAR and CDR operators operate in-place. Let's
# create new objects since the previous examples triggered a copy:
lang <- quote(foo(bar))
copy <- lang

# Now we change the argument pairlist of `copy`, making sure the new
# arguments are NULL-terminated:
mut_node_cdr(copy, node(quote(BAZ), NULL))

# Or equivalently:
mut_node_cdr(copy, pairlist(quote(BAZ)))
copy

# The original object has been changed in place:
lang
}
\seealso{
\code{\link[=duplicate]{duplicate()}} for creating copy-safe objects and
\code{\link[base:pairlist]{base::pairlist()}} for an easier way of creating a linked list of
nodes.
}
\keyword{internal}
