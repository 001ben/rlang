% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr.R
\name{expr}
\alias{expr}
\title{Untidy quotation of an expression.}
\usage{
expr(expr)
}
\arguments{
\item{expr}{An expression.}
}
\value{
The raw expression supplied as argument.
}
\description{
Unlike \code{\link[=quo]{quo()}}, \code{expr()} returns a raw expression instead of a
formula. As a result, \code{expr()} is untidy in the sense that it does
not preserve scope information for the quoted expression. It can
still be useful in certain cases.  Compared to base R's
\code{\link[base:quote]{base::quote()}}, it unquotes the expression on capture, and
compared to \code{\link[=quo]{quo()}}, the quoted expression is directly compatible
with the base R \code{\link[base:eval]{base::eval()}} function.
}
\examples{
# The advantage of expr() over quote() is that it unquotes on
# capture:
expr(list(1, !! 3 + 10))

# Unquoting can be especially useful for successive transformation
# of a captured expression:
(expr <- quote(foo(bar)))
(expr <- expr(inner(!! expr, arg1)))
(expr <- expr(outer(!! expr, !!! lapply(letters[1:3], as.symbol))))

# Unlike quo(), expr() produces expressions that can
# be evaluated with base::eval():
e <- quote(letters)
e <- expr(toupper(!!e))
eval(e)

# Be careful if you unquote a quosure: you need to take the RHS
# (and lose the scope information) to evaluate with eval():
f <- quo(letters)
e <- expr(toupper(!! get_expr(f)))
eval(e)

# On the other hand it's fine to unquote quosures if you evaluate
# with eval_tidy():
f <- quo(letters)
e <- expr(toupper(!! f))
eval_tidy(e)
}
\seealso{
See \code{\link[=quo]{quo()}} and \code{\link[=expr_interp]{expr_interp()}} for more
explanation on tidy quotation.
}
