% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr-lang.R
\name{lang_head}
\alias{lang_head}
\alias{lang_tail}
\title{Return the head or tail of a call object}
\usage{
lang_head(lang)

lang_tail(lang)
}
\arguments{
\item{lang}{Can be a call (language object), a formula quoting a
call in the right-hand side, or a frame object from which to
extract the call expression.}
}
\description{
Internally, calls (\code{language} objects as R calls them, see
\code{\link[=type_of]{type_of()}}) are structured as a tree of expressions (see
\code{\link[=switch_lang]{switch_lang()}} and \link{pairlist} documentation pages). A \code{language}
object is a node of the call tree.  \code{lang_head()} and \code{lang_tail()}
are accessor functions that allow you to retrieve the node
components.
\itemize{
\item In the most common situation, a call refers to a named
function. The head of such calls (the CAR of the \code{language} node)
contains a symbol. However the node head could also be symbolic
objects or literal functions (e.g. \code{foo()()}, see
\code{\link[=is_callable]{is_callable()}}). \code{lang_head()} returns that bare object without
any type checking or conversion (unlike \code{\link[=lang_name]{lang_name()}} which
checks that the head is a symbol and converts it to a string).
\item The second component of the tree node contains the arguments. The
type of arguments is \emph{pairlist}. Pairlists are structurally
equivalent to \code{language} objects (calls), they just have a
different type. \code{lang_tail()} returns the pairlist of
arguments (while \code{\link[=lang_args]{lang_args()}} returns the same object converted
to a regular list).
}
}
\examples{
lang <- quote(foo(bar, baz))
lang_head(lang)
lang_tail(lang)
}
\seealso{
\link{pairlist}, \code{\link[=lang_args]{lang_args()}}
}
