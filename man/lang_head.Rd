% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lang-call.R
\name{lang_head}
\alias{lang_head}
\alias{lang_tail}
\title{Return the head or tail of a call object.}
\usage{
lang_head(call = caller_frame())

lang_tail(call = caller_frame())
}
\arguments{
\item{call}{Can be a call, a formula quoting a call in the
right-hand side, or a frame object from which to extract the call
expression. If not supplied, the calling frame is used.}
}
\description{
Internally, calls are structured as a tree of expressions (see
\code{\link[=switchlang]{switchlang()}} documentation). A \code{lang} object is the top level
node of the tree. \code{lang_head()} and \code{lang_tail()} allow you to
retrieve the node components.
\itemize{
\item \code{lang_head()} Its head (the CAR of the node) usually contains a
symbol in case of a call to a named function. However it could be
other things, like another call (e.g. \code{foo()()}). Thus it is like
\code{\link[=lang_name]{lang_name()}}, but returns the head without any type checking or
conversion (whereas \code{lang_name()} checks that the head is a
symbol and converts it to a string).
\item The second component of the tree node contains the arguments. The
type of arguments is \emph{pairlist}. Pairlists are actually
equivalent to \code{language} objects (calls), they just have a
different name. \code{lang_tail()} returns the pairlist of arguments
(\code{\link[=lang_args]{lang_args()}} returns the same object converted to a regular
list).
}
}
\examples{
lang <- quote(foo(bar, baz))
lang_head(lang)
lang_tail(lang)
}
