% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env.R
\name{env_bind}
\alias{env_bind}
\title{Bind symbols to objects in an environment}
\usage{
env_bind(.env = caller_env(), ...)
}
\arguments{
\item{.env}{An environment or an object bundling an environment:
either a \link{quosure} or a \link[=is_closure]{closure}. If
missing, the environment of the current evaluation frame is
returned.}

\item{...}{Pairs of names and R objects. These dots support
\link[=dots_list]{explicit splicing} and name unquoting.}
}
\value{
The input object \code{env}, with its associated environment
modified in place.
}
\description{
\code{env_bind()} creates bindings in an environment. The bindings are
supplied as pairs of names and values. As environments are an
\link[=is_copyable]{uncopyable} type, creating bindings changes the
environment with side effects.
}
\examples{
# Create a function that uses undefined bindings:
fn <- with_env(child_env("base"), function() list(a, b, c, d, e))

# This would fail if run since `a` etc are not defined in the
# enclosure of fn():
# fn()

# Let's define those symbols by splicing a list of named objects:
data <- set_names(as_list(letters), letters)
env_bind(fn, !!! data)

# fn() now sees the objects
fn()

# You can unquote a variable referring to a symbol or a string:
var <- "a"
fn <- env_bind(fn, !!var := 10)
fn()

# Or supply names and objects via dots:
env_bind(fn, b = 20, c = 30)
fn()
}
