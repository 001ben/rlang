% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env.R
\name{env_bind_exprs}
\alias{env_bind_exprs}
\title{Assign a promise to an environment.}
\usage{
env_bind_exprs(.env = caller_env(), ..., .eval_env = caller_env())
}
\arguments{
\item{.env}{An environment or an object bundling an environment:
either a \link{quosure} or a \link[=is_closure]{closure}. If
missing, the environment of the current evaluation frame is
returned.}

\item{...}{Named expressions that will be evaluated lazily when
the new promises are forced. These dots support \link[=exprs]{splicing and
unquoting}.}

\item{.eval_env}{The environment where the promise will be evaluated
when the promise gets forced.}
}
\description{
These functions let you create a promise in an environment. Such
promises behave just like lazily evaluated arguments. They are
evaluated whenever they are touched by code, but not when they are
passed as arguments.
}
\examples{
env <- env()
env_bind_exprs(env, name = cat("forced!\\n"))
env$name
env$name

# You can unquote expressions. Note that quosures are not
# supported, only raw expressions:
expr <- quote(message("forced!"))
env_bind_exprs(env, name = !! expr)
env$name
}
\seealso{
\code{\link[=env_bind]{env_bind()}}, \code{\link[=env_bind_actives]{env_bind_actives()}}
}
