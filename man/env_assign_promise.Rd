% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env.R
\name{env_assign_promise}
\alias{env_assign_promise}
\alias{env_assign_promise_}
\title{Assign a promise to an environment.}
\usage{
env_assign_promise(env = caller_env(), nm, expr, eval_env = caller_env())

env_assign_promise_(env = caller_env(), nm, expr, eval_env = caller_env())
}
\arguments{
\item{env}{An environment or an object with a S3 method for
\code{env()}. If missing, the environment of the current
evaluation frame is returned.}

\item{nm}{The name of the binding.}

\item{expr}{An expression to capture for
\code{env_assign_promise()}, or a captured expression (either
quoted or a formula) for the standard evaluation version
\code{env_assign_promise_()}. This expression is used to create a
promise in \code{env}.}

\item{eval_env}{The environment where the promise will be evaluated
when the promise gets forced. If \code{expr} is a formula, its
environment is used instead. If not a formula and \code{eval_env}
is not supplied, the promise is evaluated in the environment
where \code{env_assign_promise()} (or the underscore version) was
called.}
}
\description{
These functions let you create a promise in an environment. Such
promises behave just like lazily evaluated arguments. They are
evaluated whenever they are touched by code, but not when they are
passed as arguments.
}
\examples{
env <- child_env()
env_assign_promise(env, "name", cat("forced!\\n"))
env$name

# Use the standard evaluation version with quoted expressions:
f <- ~message("forced!")
env_assign_promise_(env, "name2", f)
env$name2
}
\seealso{
\code{\link{env_assign}()}, \code{\link{env_assign_active}()}
}
