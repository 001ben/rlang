% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/types-chr.R
\name{as_character}
\alias{as_character}
\alias{as_utf8_character}
\alias{as_native_character}
\alias{as_string}
\alias{as_utf8_string}
\alias{as_native_string}
\title{Coerce to a character vector.}
\usage{
as_character(x, encoding = NULL)

as_utf8_character(x)

as_native_character(x)

as_string(x, encoding = NULL)

as_utf8_string(x)

as_native_string(x)
}
\arguments{
\item{x}{An object to coerce.}

\item{encoding}{If non-null, passed to
\code{\link{chr_set_encoding}()} to add an encoding mark.}
}
\description{
The input is coerced to a string character vector, bypassing method
dispatch. \code{as_character()} and \code{string()} have an
optional \code{encoding} argument to specify the encoding. R uses
this information for internal handling of strings and character
vectors. Note that this is only declarative, no encoding conversion
is attempted. See \code{\link{as_utf8_character}()} and
\code{\link{as_native_character}()} for coercing to a character
vector and attempt encoding conversion.
}
\examples{
# Let's create a string marked as UTF-8 (which is guaranteed by the
# Unicode escaping in the string):
utf8 <- "caf\\uE9"
str_encoding(utf8)
str_bytes(utf8)

# It can then be converted to a native encoding, that is, the
# encoding specified in the current locale:
\dontrun{
set_latin1_locale()
latin1 <- as_native_string(utf8)
str_encoding(latin1)
str_bytes(latin1)
}
}
\seealso{
\code{\link{chr_set_encoding}()} and
  \code{\link{set_utf8_locale}()} for information about encodings
  and locales in R, and \code{\link{string}()} and
  \code{\link{chr}()} for other ways of creating strings and
  character vectors.
}
