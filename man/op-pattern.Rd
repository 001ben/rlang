% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operators.R
\name{op-pattern}
\alias{:=}
\alias{is_pattern}
\alias{new_pattern}
\alias{op-pattern}
\title{Pattern operator.}
\usage{
":="()

is_pattern(x)

new_pattern(lhs, rhs, env = caller_env())
}
\arguments{
\item{x}{An object to test.}

\item{lhs, rhs}{Expressions for the LHS and RHS of the pattern.}

\item{env}{The evaluation environment bundled with the pattern.}
}
\description{
The pattern operator is typically used in DSL packages like
\code{ggvis} and \code{data.table}. It is exported in rlang as a
alias to \code{~}. This makes it a quoting operator that can be
shared between packages for computing on the language. Since it
effectively creates formulas, it is immediately compatible with
rlang's formulas and interpolation features.
}
\examples{
# This is useful to provide an alternative way of specifying
# arguments in DSLs:
fn <- function(...) ..1
f <- fn(arg := foo(bar) + baz)

is_formula(f)
f_lhs(f)
f_rhs(f)

# A predicate is provided to distinguish formulas from the
# colon-equals operator:
is_pattern(a := b)
is_pattern(a ~ b)
}

