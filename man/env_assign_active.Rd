% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env.R
\name{env_assign_active}
\alias{env_assign_active}
\title{Assign an active binding to an environment.}
\usage{
env_assign_active(env = caller_env(), nm, fn)
}
\arguments{
\item{env}{An environment or an object with a S3 method for
\code{env()}. If missing, the environment of the current
evaluation frame is returned.}

\item{nm}{The name of the binding.}

\item{fn}{A function that will be executed each time the binding
designated by \code{nm} is accessed in \code{env}. As all closures, this
function is lexically scoped and can rely on data that are not in
scope for expressions evaluated in \code{env}. This allows creative
solutions to difficult problems.}
}
\description{
While the expression assigned with \code{\link[=env_assign_promise]{env_assign_promise()}} is
evaluated only once, the function assigned by \code{env_assign_active()}
is evaluated each time the binding is accessed in \code{env}.
}
\examples{
# Some bindings for the lexical enclosure of `fn`:
data <- "foo"
counter <- 0

# Create an active binding in a new environment:
env <- child_env()
env_assign_active(env, "symbol", function() {
  counter <<- counter + 1
  paste(data, counter)
})

# `fn` is executed each time `symbol` is accessed from `env`:
env$symbol
env$symbol
expr_eval(quote(symbol), env)
expr_eval(quote(symbol), env)
}
\seealso{
\code{\link[=env_assign_promise]{env_assign_promise()}}
}
