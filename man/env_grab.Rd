% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env.R
\name{env_grab}
\alias{env_fetch}
\alias{env_grab}
\title{Get an object from a scope.}
\usage{
env_grab(env = env_caller(), nm)

env_fetch(env = env_caller(), nm)
}
\arguments{
\item{env}{An environment or an object with a S3 method for
\code{env()}. If missing, the environment of the current
evaluation frame is returned.}

\item{nm}{The name of a binding.}
}
\value{
An object if it exists. Otherwise, throws an error.
}
\description{
\code{env_grab()} looks up an object binded in \code{env} without
looking in its parent. \code{env_fetch()} will return objects from
the parents as well. In that respect, \code{env_grab()} is like
\code{env_has()} and \code{env_fetch()} is like \code{env_sees()}.
}
\examples{
parent <- env_new(env_empty(), list(foo = "foo"))
env <- env_new(parent, list(bar = "bar"))

# This throws an error because `foo` is not directly defined in env:
# env_grab(env, "foo")

# However `foo` can be fetched in the parent environment:
env_fetch(env, "foo")
}

