% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read-eval.R
\name{parse_expr}
\alias{f_parse_expr}
\alias{f_parse_exprs}
\alias{parse_expr}
\alias{parse_exprs}
\title{Parse R code.}
\usage{
parse_expr(x)

parse_exprs(x)

f_parse_expr(x, env = env_caller())

f_parse_exprs(x, env = env_caller())
}
\arguments{
\item{x}{Text containing expressions to parse_expr for
\code{parse_expr()} and \code{parse_exprs()}. Can also be an R
connection, for instance to a file. If the connection is marked
as temporary (see \code{\link{temporary}()}), it will be
automatically closed.}

\item{env}{The environment for the formulas. Defaults to the
context in which the parse_expr function was called. Can be any object
with a \code{as_env()} method.}
}
\value{
\code{parse_expr()} returns a formula, \code{parse_exprs()}
  returns a list of formulas.
}
\description{
These functions parse and transform text into R expressions. This
is the first step to interpret or evaluate a piece of R code
written by a programmer.
}
\details{
\code{parse_expr()} returns one expression. If the text contains
more than one expression (separated by colons or new lines), an
error is issued. On the other hand \code{parse_exprs()} can handle
multiple expressions. It always returns a list of expressions
(compare to \code{\link[base]{parse}()} which returns an
\link[base]{expression} vector). All functions also support R
connections.

The versions prefixed with \code{f_} return expressions quoted in
formulas rather than raw expressions.
}
\examples{
# parse_expr() can parse_expr any R expression:
parse_expr("mtcars \%>\% dplyr::mutate(cyl_prime = cyl / sd(cyl))")

# A string can contain several expressions separated by ; or \\n
parse_exprs("NULL; list()\\n foo(bar)")

# The versions prefixed with f_ return formulas:
f_parse_expr("foo \%>\% bar()")
f_parse_exprs("1; 2; mtcars")

# The env argument is passed to as_env(). It can be e.g. a string
# representing a scoped package environment:
f_parse_expr("identity(letters)", env = env_empty())
f_parse_exprs("identity(letters); mtcars", env = "base")


# You can also parse source files by passing a R connection. Let's
# create a file containing R code:
path <- tempfile("my-file.R")
cat("1; 2; mtcars", file = path)

# This file can be parsed by first opening a connection.
# The connection needs to be closed afterwards.
conn <- file(path)
parse_exprs(conn)
close(conn)

# You can also signal that the connection should be closed
# automatically by supplying a temporary connection:
parse_exprs(temporary(file(path)))
}
\seealso{
\code{\link[base]{parse}()}
}

