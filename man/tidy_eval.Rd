% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy-eval.R, R/tidy-sources.r
\name{tidy_eval}
\alias{tidy_eval}
\alias{tidy_eval_rhs}
\alias{tidy_eval_lhs}
\alias{tidy_eval}
\alias{data_source}
\title{Evaluate a formula}
\usage{
tidy_eval_rhs(f, data = NULL)

tidy_eval_lhs(f, data = NULL)

tidy_eval(f, data = NULL)

data_source(x, lookup_msg = NULL)
}
\arguments{
\item{f}{A formula. Any expressions wrapped in \code{ UQ() } will
will be "unquoted", i.e. they will be evaluated, and the results
inserted back into the formula. See \code{\link{tidy_quote}()}
for more details. If a list of formulas, \code{tidy_eval()} is
applied to each of them in turn and the list of results is
returned.}

\item{data}{A list (or data frame). \code{data_source} is a generic
used to find the data associated with a given object. If you want
to make \code{tidy_eval} work for your own objects, you can
define a method for this generic.}

\item{x}{An object for which you want to find associated data.}

\item{lookup_msg}{An error message when your data source is
accessed inappropriately (by position rather than name).}
}
\description{
\code{tidy_eval_rhs} evaluates the RHS of a formula and \code{tidy_eval_lhs}
evaluates the LHS. \code{tidy_eval} is a shortcut for \code{tidy_eval_rhs} since
that is what you most commonly need.
}
\details{
If \code{data} is specified, variables will be looked for first in this
object, and if not found in the environment of the formula.
}
\section{Pronouns}{

When used with \code{data}, \code{tidy_eval} provides two pronouns to make it
possible to be explicit about where you want values to come from:
\code{.env} and \code{.data}. These are thin wrappers around \code{.data}
and \code{.env} that throw errors if you try to access non-existent values.
}

\examples{
tidy_eval(~ 1 + 2 + 3)

# formulas automatically capture their enclosing environment
foo <- function(x) {
  y <- 10
  ~ x + y
}
f <- foo(1)
f
tidy_eval(f)

# If you supply data, tidy_eval will look their first:
tidy_eval(~ cyl, mtcars)

# To avoid ambiguity, you can use .env and .data pronouns to be
# explicit:
cyl <- 10
tidy_eval(~ .data$cyl, mtcars)
tidy_eval(~ .env$cyl, mtcars)

# Imagine you are computing the mean of a variable:
tidy_eval(~ mean(cyl), mtcars)
# How can you change the variable that's being computed?
# The easiest way is "unquote" with !!
# See ?tidy_quote for more details
var <- ~ cyl
tidy_eval(tidy_quote(mean( !!var )), mtcars)
}
