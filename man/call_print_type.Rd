% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/call.R
\name{call_print_type}
\alias{call_print_type}
\title{How does a call print at the console?}
\usage{
call_print_type(call)
}
\arguments{
\item{call}{A quoted function call. An error is raised if not a call.}
}
\description{
\code{call_print_type()} returns the way a call is deparsed and printed
at the console. This is useful when generating documents based on R
code. The types of calls are:
\itemize{
\item \code{"prefix"} for calls like \code{foo()}, unary operators, \code{-1}, and
operators with more than 2 arguments like \code{`+`(1, 2, 3)}
(the latter can be obtained by building calls manually).
\item \code{"infix"} for operators like \code{1 + 2} or \code{foo$bar}.
\item \code{"special"} for function definitions, control-flow calls like
\code{if} or \code{for}, and subscripting calls like \code{foo[]} and \code{foo[[]]}.
}
}
\examples{
call_print_type(quote(foo(bar)))
call_print_type(quote(foo[[bar]]))
call_print_type(quote(+foo))
call_print_type(quote(function() foo))

# When an operator call has an artificial number of arguments, R
# often prints it in prefix form:
call <- call("+", 1, 2, 3)
call
call_print_type(call)

# But not always:
call <- call("$", 1, 2, 3)
call
call_print_type(call)
}
