% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy-quote.R
\name{tidy_quotes}
\alias{tidy_quotes}
\alias{tidy_defs}
\title{Tidy quotation of multiple expressions and dots.}
\usage{
tidy_quotes(..., .named = FALSE)

tidy_defs(..., .named = FALSE)
}
\arguments{
\item{...}{Arguments to capture.}

\item{.named}{Whether to ensure all dots are named. Unnamed
elements are processed with \code{\link[=expr_text]{expr_text()}} to figure out a default
name. If an integer, it is passed to the \code{width} argument of
\code{expr_text()}, if \code{TRUE}, the default width is used. See
\code{\link[=exprs_auto_name]{exprs_auto_name()}}.}
}
\description{
\code{tidy_quotes()} quotes its arguments and returns them as a list of
tidy quotes. It is especially useful to "capture" arguments
forwarded through \code{...}.
}
\details{
Both \code{tidy_quotes} and \code{tidy_defs()} have specific support for
definition expressions of the type \code{var := expr}, with some
differences:

\describe{
\item{\code{tidy_quotes()}}{
When \code{:=} definitions are supplied to \code{tidy_quotes()},
they are treated as a synonym of argument assignment
\code{=}. On the other hand, they allow unquoting operators on
the left-hand side, which makes it easy to assign names
programmatically.}
\item{\code{tidy_defs()}}{
This dots capturing function returns definitions as is. Unquote
operators are processed on capture, in both the LHS and the
RHS. Unlike \code{tidy_quotes()}, it allows named definitions.}
}
}
\examples{
# tidy_quotes() is like the singular version but allows quoting
# several arguments:
tidy_quotes(foo(), bar(baz), letters[1:2], !! letters[1:2])

# It is most useful when used with dots. This allows quoting
# expressions across different levels of function calls:
fn <- function(...) tidy_quotes(...)
fn(foo(bar), baz)

# Note that tidy_quotes() does not check for duplicate named
# arguments:
fn <- function(...) tidy_quotes(x = x, ...)
fn(x = a + b)


# Dots can be spliced in:
args <- list(x = 1:3, y = ~var)
tidy_quotes(!!! args, z = 10L)

# Raw expressions are turned to formulas:
args <- alist(x = foo, y = bar)
tidy_quotes(!!! args)


# Definitions are treated similarly to named arguments:
tidy_quotes(x := expr, y = expr)

# However, the LHS of definitions can be unquoted. The return value
# must be a symbol or a string:
var <- "foo"
tidy_quotes(!!var := expr)

# If you need the full LHS expression, use tidy_defs():
dots <- tidy_defs(var = foo(baz) := bar(baz))
dots$defs
}
