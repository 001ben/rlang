% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy-eval.R
\name{tidy_dyn_eval}
\alias{tidy_dyn_eval}
\title{Tidy evaluation in a custom environment.}
\usage{
tidy_dyn_eval(f, bottom_env, top_env = NULL)
}
\arguments{
\item{f}{A formula. Any expressions wrapped in \code{ UQ() } will
will be "unquoted", i.e. they will be evaluated, and the results
inserted back into the formula. See \code{\link{tidy_quote}()}
for more details. If a list of formulas, \code{tidy_eval()} is
applied to each of them in turn and the list of results is
returned.}

\item{bottom_env}{This is the environment in which formula-promises
are evaluated. This environment typically contains pronouns and
its direct parents contain the rescoping bindings. The last one
of these parents is the `top_env`.}

\item{top_env}{The top environment of the dynamic scope is chained
and rechained to lexical enclosures of self-evaluating formulas
(or formula-promises). This ensures hygienic scoping: the
bindings in the dynamic scope have precedence, but the bindings
in the dynamic environment where the tidy quotes were created are
in scope as well.}
}
\description{
We recommend using [tidy_eval()] in your DSLs as much as possible
to ensure some consistency across packages (`.data` and `.env`
pronouns, etc). However, some DSLs might need a different
evaluation environment. In this case, you can call
`tidy_dyn_eval()` with the bottom and the top of your custom
dynamic scope (see [dyn_scope_env()] for more information).
}
