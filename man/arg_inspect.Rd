% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arg.R
\name{arg_inspect}
\alias{arg_inspect}
\alias{arg_inspect_}
\title{Inspect an argument}
\usage{
arg_inspect(x)

arg_inspect_(expr, stack, only_dots = FALSE)
}
\arguments{
\item{x}{An argument to a function.}

\item{expr}{A quoted symbol giving the name of the argument to
inspect.}

\item{stack}{A \code{call_stack} object as returned by \code{\link[=call_stack]{call_stack()}}.}

\item{only_dots}{Whether to stop introspection once
forwarded dots have been climbed. Setting this to \code{TRUE} is only
useful for inspecting dots (cf. \code{\link[=dots_quosures]{dots_quosures()}} which does not
follow symbols).}
}
\value{
A list containing:

\item{caller_frame}{The original calling frame. This is the frame
in which \code{expr} should be evaluated, unless the argument is
missing (see below).}

\item{expr}{The expression provided in the original call. If the
argument was missing, \code{expr} is the default argument of the
function; if there was no default, \code{expr} is the missing
argument (see \code{\link[=missing_arg]{missing_arg()}}).}

\item{name}{The name of the formal argument to which \code{expr} was
originally supplied.}

\item{ctxt_frame}{The frame providing the scope for \code{expr}, which
should normally be evaluated in \code{ctxt_frame$env}.  This is
normally the original calling frame, unless the argument was
missing. In that case, \code{ctxt_frame} is the evaluation frame of
the called function. The difference reflects the evaluation
rules of R, where default arguments are scoped within the
called function rather than the calling frame.}
}
\description{
\code{arg_inspect()} provides argument introspection in the context of
lazy evaluation. Compared to \code{\link[=catch_quosure]{catch_quosure()}}, the returned
information is more complete and takes R's lazy evaluation
semantics into account: if an argument is passed around without
being evaluated, \code{arg_inspect()} is able to return the expression
at the original call site as well as the relevant scoping
environment in which this expression is supposed to be evaluated
when the argument is forced. To accomplish this, \code{arg_inspect()}
climbs the call stack to find where an argument was first supplied,
with which expression, in which evaluation environment.
\code{arg_inspect_()} is the standard-evaluation version of
\code{arg_inspect()} and takes a symbol and a call stack object.
}
\details{
\code{arg_inspect()} should be used with two caveats in mind. First, it
is slower than \code{\link[=catch_quosure]{catch_quosure()}} and \code{lazyeval::lazy()}. Thus you
should probably avoid using it in functions that might be used in
tight loops (such as a loop over the rows of data frame). Second,
\code{arg_inspect()} ignores all reassignment of arguments. It has no
way of detecting that an inspected argument got reassigned along
the way, and will continue to climb the calls looking for an
earlier call site. These two limitations are inherent to the stack
climbing approach that powers this function.
}
