% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quo.R
\name{is_quosure}
\alias{is_quosure}
\alias{is_quosureish}
\title{Is an object a quosure or quosure-like?}
\usage{
is_quosure(x)

is_quosureish(x, scoped = NULL)
}
\arguments{
\item{x}{An object to test.}

\item{scoped}{A boolean indicating whether the quosure or formula
is scoped, that is, has a valid environment attribute. If \code{NULL},
the scope is not inspected.}
}
\description{
These predicates test for \link[=new_quosure]{quosure} objects.
\itemize{
\item \code{is_quosure()} tests for the canonical R quosure: the one-sided
"formula".
\item \code{is_quosureish()} tests for general R quosure objects: quosures,
two-sided formulas, and \link[=op-definition]{definitions}.
}
}
\details{
The \code{scoped} argument patterns-match on whether the scoped bundled
with the quosure is valid or not. Invalid scopes may happen in
nested quotations like \code{~~expr}, where the outer quosure is validly
scoped but not the inner one. This is because \code{~} saves the
environment when it is evaluated, and quoted quosures are by
definition not evaluated. Note that in the \link[=eval_tidy]{tidy evaluation
framework}, unscoped quosures are automatically given
the environment of the outer quosure during the evaluation process.
}
\examples{
# Quosures are created with quo():
quo(foo)
is_quosure(quo(foo))

# Formulas look similar to quosures but are not quosures:
is_quosure(~foo)

# But they are quosureish:
is_quosureish(~foo)

# Note that two-sided formulas are never quosureish:
is_quosureish(a ~ b)
}
\seealso{
\link[=new_quosure]{as_quosure()} and \code{\link[=new_quosure]{new_quosure()}} for creating
quosures, and \code{\link[=quo]{quo()}} or \code{\link[=eval_tidy]{eval_tidy()}} for information
about the role of quosures in the tidy evaluation framework.
}
