% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read-eval.R
\name{read}
\alias{f_read}
\alias{f_read_conn}
\alias{f_read_list}
\alias{read}
\alias{read_conn}
\alias{read_list}
\title{Read R code.}
\usage{
read(x)

read_list(x)

read_conn(x)

f_read(x, env = env_caller())

f_read_list(x, env = env_caller())

f_read_conn(x, env = env_caller())
}
\arguments{
\item{x}{Text containing expressions to read for \code{read()} and
\code{read_list()}, or a connection to a file for
\code{read_conn()}.}

\item{env}{The environment for the formulas. Defaults to the
context in which the read function was called. Can be any object
with a \code{as_env()} method.}
}
\value{
\code{read()} returns a formula, \code{read_list()} and
  \code{read_conn()} return a list of formulas.
}
\description{
These functions parse and transform text into R expressions. This
is the first step of interpreting or evaluating a piece of code
written by a programmer.
}
\details{
\code{read()} returns one expression. If the text contains more
than one expression (separated by colons or new lines), an error is
issued. On the other hand \code{read_list()} can handle multiple
expressions. It always returns a list of expressions (compare to
\code{\link[base]{parse}()} which returns an obsolete expression
vector). Finally, \code{read_conn()} reads a R \link{connection}.

The versions prefixed with \code{f_} return expressions quoted in
formulas rather than raw expressions.
}
\examples{
# read() can read any R expression:
read("mtcars \%>\% dplyr::mutate(cyl_prime = cyl / sd(cyl))")

# A string can contain several expressions separated by ; or \\n
read_list("NULL; list()\\n foo(bar)")

# The versions prefixed with f_ return formulas:
f_read("foo \%>\% bar()")
f_read_list("1; 2; mtcars")

# The env argument is passed to as_env(). It can be e.g. a string
# representing a scoped package environment:
f_read("identity(letters)", env = env_empty())
f_read_list("identity(letters); mtcars", env = "base")
}
\seealso{
\code{\link[base]{parse}()}
}

