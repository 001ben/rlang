% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy-eval.R, R/tidy-sources.r
\name{eval_tidy}
\alias{eval_tidy}
\alias{eval_tidy_rhs}
\alias{eval_tidy_lhs}
\alias{eval_tidy}
\alias{data_source}
\title{Evaluate a quosure.}
\usage{
eval_tidy_rhs(f, data = NULL)

eval_tidy_lhs(f, data = NULL)

eval_tidy(f, data = NULL)

data_source(x, lookup_msg = NULL)
}
\arguments{
\item{f}{A formula. Any expressions wrapped in \code{UQ()} will will be
"unquoted", i.e. they will be evaluated, and the results inserted
back into the formula. See \code{\link[=quo]{quo()}} for more details. If a
list of formulas, \code{eval_tidy()} is applied to each of them in
turn and the list of results is returned.}

\item{data}{A list (or data frame). \code{data_source} is a generic used
to find the data associated with a given object. If you want to
make \code{eval_tidy} work for your own objects, you can define a
method for this generic.}

\item{x}{An object for which you want to find associated data.}

\item{lookup_msg}{An error message when your data source is
accessed inappropriately (by position rather than name).}
}
\description{
\code{eval_tidy_rhs} evaluates the RHS of a formula and
\code{eval_tidy_lhs()} evaluates the LHS. \code{eval_tidy()} is a shortcut
for \code{eval_tidy_rhs()} since that is what you most commonly need.
}
\details{
If \code{data} is specified, variables will be looked for first in this
object, and if not found in the environment of the formula.
}
\section{Pronouns}{


When used with \code{data}, \code{eval_tidy()} provides two pronouns to
make it possible to be explicit about where you want values to
come from: \code{.env} and \code{.data}. These are thin wrappers around
\code{.data} and \code{.env} that throw errors if you try to access
non-existent values.
}

\examples{
eval_tidy(~ 1 + 2 + 3)

# formulas automatically capture their enclosing environment
foo <- function(x) {
  y <- 10
  ~ x + y
}
f <- foo(1)
f
eval_tidy(f)

# If you supply data, eval_tidy() will look there first:
eval_tidy(~ cyl, mtcars)

# To avoid ambiguity, you can use .env and .data pronouns to be
# explicit:
cyl <- 10
eval_tidy(~ .data$cyl, mtcars)
eval_tidy(~ .env$cyl, mtcars)

# Imagine you are computing the mean of a variable:
eval_tidy(~ mean(cyl), mtcars)
# How can you change the variable that's being computed?
# The easiest way is "unquote" with !!
# See ?quosure for more details
var <- ~ cyl
eval_tidy(quo(mean( !!var )), mtcars)
}
