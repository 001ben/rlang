% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy-quote.R
\name{tidy_quote_expr}
\alias{tidy_quote_expr}
\title{Untidy quotation of an expression.}
\usage{
tidy_quote_expr(expr)
}
\arguments{
\item{expr}{An expression.}
}
\value{
The raw expression supplied as argument.
}
\description{
Unlike \code{\link[=tidy_quote]{tidy_quote()}}, \code{tidy_quote_expr()} returns a raw expression
instead of a formula. As a result, \code{tidy_quote_expr()} is untidy in
the sense that it does not preserve scope information for the
quoted expression. It can still be useful in certain cases.
Compared to base R's \code{\link[base:quote]{base::quote()}}, it unquotes the expression on
capture, and compared to \code{\link[=tidy_quote]{tidy_quote()}}, the quoted expression is
directly compatible with the base R \code{\link[base:eval]{base::eval()}} function.
}
\examples{
# The advantage of tidy_quote_expr() over quote() is that it unquotes on
# capture:
tidy_quote_expr(list(1, !! 3 + 10))

# Unquoting can be especially useful for successive transformation
# of a captured expression:
(expr <- quote(foo(bar)))
(expr <- tidy_quote_expr(inner(!! expr, arg1)))
(expr <- tidy_quote_expr(outer(!! expr, !!! lapply(letters[1:3], as.symbol))))

# Unlike tidy_quote(), tidy_quote_expr() produces expressions that can
# be evaluated with base::eval():
e <- quote(letters)
e <- tidy_quote_expr(toupper(!!e))
eval(e)

# Be careful if you unquote a formula-quote: you need to take the
# RHS (and lose the scope information) to evaluate with eval():
f <- ~letters
e <- tidy_quote_expr(toupper(!! f_rhs(f)))
eval(e)

# However it's fine to unquote formulas if you evaluate with tidy_eval():
f <- ~letters
e <- tidy_quote_expr(toupper(!! f))
tidy_eval(e)
}
\seealso{
See \code{\link[=tidy_quote]{tidy_quote()}} and \code{\link[=tidy_interp]{tidy_interp()}} for more
explanation on tidy quotation.
}
